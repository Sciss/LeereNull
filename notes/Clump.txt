def defer( thunk: => Unit ) {
   java.awt.EventQueue.invokeLater( new Runnable { def run() { thunk }})
}

def edit( e: de.sciss.kontur.edit.Editor, name: String = "Edit" )( fun: de.sciss.app.AbstractCompoundEdit => Unit ) {
   val ce = e.editBegin( name )
   var open = true
   try {
      fun( ce )
      e.editEnd( ce )
      open = false
   } finally {
      if( open ) e.editCancel( ce )
   }
}

def sortTracks( t: Timeline = doc.timelines.toList.head ) {
   val tracks   = t.tracks
   val ts       = tracks.toList
   tracks.editor.foreach { e =>
      edit( e, "Arrange tracks" ) { ce =>
         ts.foreach( e.editRemove( ce, _ ))
         ts.groupBy( a => {
                val i = a.name.indexOf( "Ch-" )
                val j = a.name.indexOf( " ", i + 1 )
                a.name.substring( i + 3, j ).toInt
         }).flatMap({ case (_, as) =>
             val as1 = as.sortBy( _.trail.getAll().size ).toIndexedSeq
             val as2 = as1.zipWithIndex.partition( _._2 % 2 == 0 )
             val as3 = as2._1.map(_._1)
             val as4 = as2._2.map(_._1)
             as3 ++ as4
         }).zipWithIndex.foreach {
            case (t, i) => e.editInsert( ce, i, t )
         }
      }
   }
}

defer( sortTracks() )
